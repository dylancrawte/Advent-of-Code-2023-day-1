name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Cleanup AWS resources on failure
      if: failure()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-north-1'
      run: |
        pip install boto3
        python cleanup_aws_resources.py


    - name: Execute day1.py
      run: python day1.py

    - name: Zip Lambda function
      run: zip -j lambda_function.zip day1.py

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      run: terraform plan -out=tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'eu-north-1'

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'eu-north-1'

    - name: Upload file to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-north-1'
      run: python upload_to_s3.py input.txt advent-of-code-day

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200

    - name: Create Athena table and run query
      run: python lambda_athena.py

    - name: Display results and logs
      run: |
        cat query_results.md
        cat athena_debug.log

    - name: Configure Git
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Cleanup on failure
      if: failure()
      run: |
        terraform output -raw cleanup_script_path | bash

    - name: Cleanup S3 bucket
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-north-1'
      run: |
        python -c "import boto3; s3 = boto3.resource('s3'); bucket = s3.Bucket('advent-of-code-day'); bucket.objects.all().delete(); bucket.delete()"

    - name: Cleanup IAM role
      if: always()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-north-1'
      run: |
        python -c "import boto3; iam = boto3.client('iam'); iam.delete_role(RoleName='your-role-name')"

    - name: Cleanup Athena databases on failure
      if: failure()
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: 'eu-north-1'
      run: |
        python -c "
        import boto3
        athena = boto3.client('athena')
        databases = athena.list_databases(CatalogName='AwsDataCatalog')['DatabaseList']
        for db in databases:
            if db['Name'].startswith('your_prefix_'):  # Replace with your database name prefix
                athena.delete_database(CatalogName='AwsDataCatalog', DatabaseName=db['Name'])
        "

    - name: Deploy to AWS
      run: |
        # Your deployment steps here
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1  # or your preferred region

